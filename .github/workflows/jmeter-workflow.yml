# ==============================================
# JMeter Test Workflow
# Fully commented version for junior engineers
# ==============================================

name: JMeter Consumer Workflow

# Trigger workflow manually with inputs
on:
  workflow_dispatch:
    inputs:
      action:  # Choose action: run tests or cleanup old runs
        description: "Choose action"
        required: true
        default: run-tests
        type: choice
        options: [run-tests, cleanup]

      run_id:  # Optional Run ID; if blank, timestamp is used
        description: "Optional Run ID (leave blank for auto yyyymmdd-HHMMSS)"
        required: false
        default: ""

      environment:  # Target environment for JMeter tests
        description: "Environment for JMeter tests"
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]

      test_type:  # Type of test to run (load, stress, endurance)
        description: "Type of test to run"
        required: true
        default: load
        type: choice
        options: [load, stress, endurance]

      scripts:  # Comma-separated list of JMX scripts
        description: "Comma-separated JMX scripts to run (default: all)"
        required: false
        default: "create-consumer,get-consumer,get-product,post-product,home-page"

      vm_count:  # Number of parallel VM instances
        description: "Number of VM instances to run in parallel"
        required: true
        default: 1

      retention_days:  # Retention period for artifacts
        description: "Retention period (days) for old runs/artifacts"
        required: true
        default: "7"

      include_extra:  # Flag to include extra folders (jmx, data, config) in artifacts
        description: "Include extra folders in artifact? Y/N"
        required: false
        default: "N"

permissions:
  contents: write  # Needed to upload artifacts and manage workflow runs
  actions: write   # Needed for deleting old workflow runs

# ------------------------------
# Prepare job: generate run ID and VM matrix
# ------------------------------
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      RUN_ID: ${{ steps.setid.outputs.RUN_ID }}
      MATRIX_INSTANCES: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      # Step 1: Generate run ID based on input or timestamp
      - name: Generate runID
        id: setid
        run: |
          # If user provides run_id, use it; otherwise use timestamp
          if [ -z "${{ github.event.inputs.run_id }}" ]; then
            runid=$(date +%Y%m%d-%H%M%S)
          else
            runid="${{ github.event.inputs.run_id }}"
          fi
          echo "RUN_ID=$runid" >> $GITHUB_OUTPUT

      # Step 2: Generate matrix for VM instances
      - name: Generate VM matrix
        id: setmatrix
        run: |
          COUNT=${{ github.event.inputs.vm_count }}
          if [ -z "$COUNT" ]; then COUNT=1; fi
          # Create JSON array for matrix strategy
          MATRIX=$(seq -s, 1 $COUNT | sed 's/,/","/g')
          MATRIX="[\"$MATRIX\"]"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

# ------------------------------
# Run JMeter tests job
# ------------------------------
  run-tests:
    if: ${{ github.event.inputs.action == 'run-tests' }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: ${{ fromJSON(needs.prepare.outputs.MATRIX_INSTANCES) }}
      fail-fast: false  # Continue all instances even if one fails
    steps:
      - uses: actions/checkout@v4  # Checkout repository

      # Step: Setup Java (needed for JMeter)
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Step: Validate test scripts and data folders
      - name: Validate folder structure and scripts
        run: |
          TEST_TYPE="${{ github.event.inputs.test_type }}"
          SCRIPTS="${{ github.event.inputs.scripts }}"
          IFS=',' read -ra SCRIPT_ARR <<< "$SCRIPTS"
          TEST_FOLDER="tests/$TEST_TYPE"
          if [ ! -d "$TEST_FOLDER" ] || [ -z "$(ls -A $TEST_FOLDER)" ]; then
            echo "Error: Test folder $TEST_FOLDER missing or empty!"
            exit 1
          fi
          for script in "${SCRIPT_ARR[@]}"; do
            JMX_PATH="$TEST_FOLDER/$script.jmx"
            DATA_FOLDER="$TEST_FOLDER/data/$script"
            if [ ! -f "$JMX_PATH" ]; then
              echo "Error: JMX file $JMX_PATH does not exist!"
              exit 1
            fi
            if [ ! -d "$DATA_FOLDER" ] || [ -z "$(ls -A $DATA_FOLDER)" ]; then
              echo "Warning: Data folder $DATA_FOLDER missing or empty!"
            fi
          done

      # Step: Install JMeter
      - name: Install JMeter
        run: |
          JMETER_VERSION=5.6.3
          curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-$JMETER_VERSION.tgz -o jmeter.tgz
          tar -xzf jmeter.tgz
          mv apache-jmeter-$JMETER_VERSION $HOME/jmeter
          echo "$HOME/jmeter/bin" >> $GITHUB_PATH

      # Step: Install JMeter plugins
      - name: Install JMeter Plugins
        run: |
          mkdir -p $HOME/jmeter/lib/ext
          # Dummy plugin
          curl -L -o /tmp/jpgc-dummy-0.4.zip https://jmeter-plugins.org/files/packages/jpgc-dummy-0.4.zip
          unzip -o /tmp/jpgc-dummy-0.4.zip -d /tmp/dummy-plugin
          find /tmp/dummy-plugin -name "*.jar" -exec cp {} $HOME/jmeter/lib/ext/ \;
          # Ultimate Thread Group plugin
          curl -L -o /tmp/jpgc-ultimate-thread-group-3.0.zip https://jmeter-plugins.org/files/packages/jpgc-casutg-3.1.1.zip
          unzip -o /tmp/jpgc-ultimate-thread-group-3.0.zip -d /tmp/ultimate-plugin
          find /tmp/ultimate-plugin -name "*.jar" -exec cp {} $HOME/jmeter/lib/ext/ \;

      # Step: Prepare results folder
      - name: Prepare results folder
        run: |
          RUN_ID=${{ needs.prepare.outputs.RUN_ID }}
          mkdir -p results/$RUN_ID

      # Step: Run JMeter scripts
      - name: Run JMeter scripts
        continue-on-error: false
        run: |
          TEST_TYPE="${{ github.event.inputs.test_type }}"
          ENV="${{ github.event.inputs.environment }}"
          SCRIPTS="${{ github.event.inputs.scripts }}"
          RUN_ID=${{ needs.prepare.outputs.RUN_ID }}
          INSTANCE=${{ matrix.instance }}
          IFS=',' read -ra SCRIPT_ARR <<< "$SCRIPTS"
          for script in "${SCRIPT_ARR[@]}"; do
            echo "Running JMeter script: $script.jmx (instance $INSTANCE)"
            TEST_FOLDER="tests/$TEST_TYPE"
            RESULTS_FOLDER="results/$RUN_ID"
            # Run JMeter in non-GUI mode
            jmeter -n -t "$TEST_FOLDER/$script.jmx" \
                   -l "$RESULTS_FOLDER/$script-instance$INSTANCE.jtl" \
                   -j "$RESULTS_FOLDER/$script-instance$INSTANCE.log" \
                   -q "env/$ENV.properties"
            # Generate HTML report (skip if failed)
            jmeter -g "$RESULTS_FOLDER/$script-instance$INSTANCE.jtl" \
                   -o "$RESULTS_FOLDER/$script-instance$INSTANCE-report" || echo "HTML report skipped"
          done

      # Step: Upload results (always, even if run cancelled)
      - name: Upload JMeter results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-${{ needs.prepare.outputs.RUN_ID }}-instance${{ matrix.instance }}
          path: results/${{ needs.prepare.outputs.RUN_ID }}/
          retention-days: ${{ github.event.inputs.retention_days }}

      # Step: Package test artifacts (optional extra folders)
      - name: Package test artifacts
        if: always()
        run: |
          RUN_ID=${{ needs.prepare.outputs.RUN_ID }}
          TEST_TYPE="${{ github.event.inputs.test_type }}"
          RESULTS_FOLDER="results/$RUN_ID"
          ZIP_NAME="results-${RUN_ID}-instance${{ matrix.instance }}.zip"

          echo "ðŸ“¦ Zipping results..."
          # Always include logs and JTL
          FILES=$(ls $RESULTS_FOLDER/*.{jtl,log} 2>/dev/null || echo "")

          # Include HTML report folders
          REPORTS=$(find "$RESULTS_FOLDER" -maxdepth 1 -type d -name "*-report" || echo "")

          # Include extra folders if flag Y
          INCLUDE_EXTRA="${{ github.event.inputs.include_extra }}"
          if [ "$INCLUDE_EXTRA" == "Y" ]; then
            JMX_FILES=$(ls tests/$TEST_TYPE/*.jmx 2>/dev/null || echo "")
            DATA_FOLDER="tests/$TEST_TYPE/data"
            CONFIG_FILES=$(ls env/*.properties 2>/dev/null || echo "")
            FILES="$FILES $JMX_FILES $DATA_FOLDER $CONFIG_FILES"
          fi

          # Add report folders
          FILES="$FILES $REPORTS"

          zip -r "$ZIP_NAME" $FILES
          echo "âœ… Artifacts packaged into $ZIP_NAME"

# ------------------------------
# Cleanup job: deletes old workflow runs and result folders
# ------------------------------
  cleanup:
    if: ${{ github.event.inputs.action == 'cleanup' }}
    runs-on: ubuntu-latest
    steps:
      # Delete workflow runs older than retention_days
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const days = parseInt('${{ github.event.inputs.retention_days }}', 10);
            const cutoff = new Date(Date.now() - days*24*60*60*1000);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runs = await github.paginate(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, per_page: 100 }
            );
            let deleted = 0;
            for (const run of runs) {
              const created = new Date(run.created_at);
              if (created < cutoff) {
                await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                deleted++;
              }
            }
            core.info(`Deleted ${deleted} workflow runs older than ${days} days`)

      # Delete old results folders
      - name: Delete old result folders
        run: |
          RETENTION_DAYS=${{ github.event.inputs.retention_days }}
          for folder in results/*; do
            if [ -d "$folder" ]; then
              FOLDER_DATE=$(basename "$folder" | cut -d'-' -f1)
              CURRENT_DATE=$(date +%Y%m%d)
              DIFF=$((CURRENT_DATE - FOLDER_DATE))
              if [ $DIFF -gt $RETENTION_DAYS ]; then
                rm -rf "$folder"
                echo "Deleted old results folder: $folder"
              fi
            fi
          done
