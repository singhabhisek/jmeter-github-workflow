name: JMeter Consumer Workflow  # Workflow name

# Trigger workflow manually with inputs
on:
  workflow_dispatch:
    inputs:
      action:  # Choose workflow action: run tests or cleanup
        description: "Choose action"
        required: true
        default: run-tests
        type: choice
        options: [run-tests, cleanup]
      run_id:  # Optional run ID; auto-generated if empty
        description: "Optional Run ID (leave blank for auto yyyymmdd-HHMMSS)"
        required: false
        default: ""
      environment:  # Environment properties for JMeter
        description: "Target environment"
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      test_type:  # New dropdown: type of test
        description: "Type of test to run"
        required: true
        default: load
        type: choice
        options: [load, stress, endurance]
      scripts:  # Optional JMX scripts
        description: "Comma-separated JMX scripts to run (default: create-consumer, others optional)"
        required: false
        default: "create-consumer,"
      vm_count:  # Number of parallel VM instances
        description: "Number of VM instances to run in parallel"
        required: true
        default: 1
      retention_days:  # Retention for old runs/artifacts
        description: "Retention period (days) for old runs/artifacts"
        required: true
        default: "7"

# Job: Prepare Run ID and VM matrix (no changes)
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      RUN_ID: ${{ steps.setid.outputs.RUN_ID }}
      MATRIX_INSTANCES: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      - name: Generate runID
        id: setid
        run: |
          if [ -z "${{ github.event.inputs.run_id }}" ]; then
            runid=$(date +%Y%m%d-%H%M%S)
          else
            runid="${{ github.event.inputs.run_id }}"
          fi
          echo "RUN_ID=$runid" >> $GITHUB_OUTPUT

      - name: Generate VM matrix
        id: setmatrix
        run: |
          COUNT=${{ github.event.inputs.vm_count }}
          if [ -z "$COUNT" ]; then COUNT=1; fi
          MATRIX=$(seq -s, 1 $COUNT | sed 's/,/","/g')
          MATRIX="[\"$MATRIX\"]"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

# Job: Run JMeter tests (updated for test_type and folder validation)
  run-tests:
    if: ${{ github.event.inputs.action == 'run-tests' }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: ${{ fromJSON(needs.prepare.outputs.MATRIX_INSTANCES) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Install JMeter + plugins
      - name: Install JMeter and Plugins
        run: |
          JMETER_VERSION=5.6.3
          curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-$JMETER_VERSION.tgz -o jmeter.tgz
          tar -xzf jmeter.tgz
          mv apache-jmeter-$JMETER_VERSION $HOME/jmeter
          echo "$HOME/jmeter/bin" >> $GITHUB_PATH

          # Plugins
          mkdir -p $HOME/jmeter/lib/ext
          curl -L -o $HOME/jmeter/lib/ext/dummy-sampler.jar https://jmeter-plugins.org/files/packages/dummy-sampler-2.0.jar
          curl -L -o $HOME/jmeter/lib/ext/ultimate-thread-group.jar https://jmeter-plugins.org/files/packages/ultimate-thread-group-3.0.jar

      # Prepare results folder
      - name: Prepare results folder
        run: |
          RUN_ID=${{ needs.prepare.outputs.RUN_ID }}
          mkdir -p results/$RUN_ID  # Folder per run

      # Validate test_type folder exists
      - name: Validate test_type folder
        run: |
          TEST_TYPE=${{ github.event.inputs.test_type }}
          FOLDER="tests/$TEST_TYPE"
          if [ ! -d "$FOLDER" ] || [ -z "$(ls -A $FOLDER)" ]; then
            echo "Error: Folder $FOLDER does not exist or is empty"
            exit 1
          fi

      # Validate JMX scripts and data folders
      - name: Validate JMX scripts and data
        run: |
          SCRIPTS="${{ github.event.inputs.scripts }}"
          IFS=',' read -ra SCRIPT_ARR <<< "$SCRIPTS"
          TEST_TYPE=${{ github.event.inputs.test_type }}
          RUN_ID=${{ needs.prepare.outputs.RUN_ID }}

          for script in "${SCRIPT_ARR[@]}"; do
            # Skip empty entries
            if [ -z "$script" ]; then continue; fi

            JMX_PATH="tests/$TEST_TYPE/$script.jmx"
            DATA_FOLDER="tests/$TEST_TYPE/data/$script"

            if [ ! -f "$JMX_PATH" ]; then
              echo "Error: Script $JMX_PATH not found"
              exit 1
            fi

            if [ ! -d "$DATA_FOLDER" ] || [ -z "$(ls -A $DATA_FOLDER)" ]; then
              echo "Error: Data folder $DATA_FOLDER missing or empty"
              exit 1
            fi
          done
