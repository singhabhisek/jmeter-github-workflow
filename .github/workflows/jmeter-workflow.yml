name: JMeter Test Workflow

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Select type of test to run"
        required: true
        default: "load"
        type: choice
        options:
          - load
          - stress
          - endurance
      user_name:
        description: "Enter the test script filename (without .jmx extension)"
        required: true
      run_id:
        description: "Optional Run ID (leave blank for auto yyyymmdd-HHMMSS)"
        required: false
        default: ""
      environment:
        description: "Select target environment"
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]

permissions:
  contents: write
  actions: write

jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      RUN_ID: ${{ steps.setid.outputs.RUN_ID }}
      MATRIX_INSTANCES: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      - name: Generate runID
        id: setid
        run: |
          if [ -z "${{ github.event.inputs.run_id }}" ]; then
            runid=$(date +%Y%m%d-%H%M%S)
          else
            runid="${{ github.event.inputs.run_id }}"
          fi
          echo "RUN_ID=$runid" >> $GITHUB_OUTPUT

      - name: Generate VM matrix
        id: setmatrix
        run: |
          COUNT=1
          MATRIX=$(seq -s, 1 $COUNT | sed 's/,/","/g')
          MATRIX="[\"$MATRIX\"]"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-tests:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: ${{ fromJSON(needs.prepare.outputs.MATRIX_INSTANCES) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate test folder
        run: |
          TEST_TYPE=${{ github.event.inputs.test_type }}
          TEST_FOLDER="tests/$TEST_TYPE"
          if [ ! -d "$TEST_FOLDER" ]; then
            echo "Error: Test folder $TEST_FOLDER does not exist!"
            exit 1
          fi
          if [ -z "$(ls -A $TEST_FOLDER)" ]; then
            echo "Error: Test folder $TEST_FOLDER is empty!"
            exit 1
          fi
          echo "âœ… Test folder $TEST_FOLDER exists and is not empty"

      - name: Validate user script
        run: |
          USER_FILE="${{ github.event.inputs.user_name }}.jmx"
          TEST_TYPE=${{ github.event.inputs.test_type }}
          SCRIPT_PATH="tests/$TEST_TYPE/$USER_FILE"
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "Error: Script file $SCRIPT_PATH does not exist!"
            exit 1
          fi
          echo "âœ… Script $SCRIPT_PATH exists"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install JMeter
        run: |
          JMETER_VERSION=5.6.3
          curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-$JMETER_VERSION.tgz -o jmeter.tgz
          tar -xzf jmeter.tgz
          mv apache-jmeter-$JMETER_VERSION $HOME/jmeter
          echo "$HOME/jmeter/bin" >> $GITHUB_PATH

      - name: Install JMeter Plugins
        run: |
          mkdir -p $HOME/jmeter/lib/ext
          curl -L -o $HOME/jmeter/lib/ext/dummy-sampler.jar https://jmeter-plugins.org/files/packages/dummy-sampler-2.0.jar
          curl -L -o $HOME/jmeter/lib/ext/ultimate-thread-group.jar https://jmeter-plugins.org/files/packages/ultimate-thread-group-3.0.jar
          echo "âœ… Plugins installed"

      - name: Prepare results folder
        run: mkdir -p results

      - name: Run JMeter scripts
        continue-on-error: true  # Allow workflow to continue even if test fails
        run: |
          SCRIPTS="${{ github.event.inputs.user_name }}"
          IFS=',' read -ra SCRIPT_ARR <<< "$SCRIPTS"
          RUN_ID=${{ needs.prepare.outputs.RUN_ID }}
          ENV="${{ github.event.inputs.environment }}"
          INSTANCE="${{ matrix.instance }}"

          for script in "${SCRIPT_ARR[@]}"; do
            echo "Running script: $script (instance $INSTANCE)"
            TEST_FOLDER="tests/${{ github.event.inputs.test_type }}"

            jmeter -n -t "$TEST_FOLDER/$script.jmx" \
                   -l results/${RUN_ID}-$script-instance${INSTANCE}.jtl \
                   -j results/${RUN_ID}-$script-instance${INSTANCE}.log \
                   -q env/${ENV}.properties

            jmeter -g results/${RUN_ID}-$script-instance${INSTANCE}.jtl \
                   -o results/${RUN_ID}-$script-instance${INSTANCE}-report

            echo "------ JMeter log for $script instance $INSTANCE ------"
            cat results/${RUN_ID}-$script-instance${INSTANCE}.log
            echo "-------------------------------------------------------"
          done

      # --- Upload artifacts regardless of success/failure ---
      - name: Upload JMeter artifacts
        if: always()  # Run even if previous step failed
        uses: actions/upload-artifact@v3
        with:
          name: jmeter-results-${{ needs.prepare.outputs.RUN_ID }}
          path: results/  # Upload everything in results folder

      # --- Clean up workspace ---
      - name: Cleanup
        if: always()  # Always run
        run: |
          echo "ðŸ§¹ Cleaning up workspace"
          rm -rf $HOME/jmeter
          rm -rf results
          rm -f jmeter.tgz
          echo "âœ… Cleanup completed"
