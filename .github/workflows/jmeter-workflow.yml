name: JMeter Consumer Workflow

# Trigger manually
on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action"
        required: true
        default: run-tests
        type: choice
        options: [run-tests, cleanup]
      run_id:
        description: "Optional Run ID (leave blank for auto yyyymmdd-HHMMSS)"
        required: false
        default: ""
      environment:
        description: "Environment"
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      scripts:
        description: "Comma-separated JMX scripts to run (default: all)"
        required: false
        default: "create-consumer,get-consumer,get-product,post-product,home-page"
      previous_run_id:
        description: "Optional: specify runID for dependent data (like consumers)"
        required: false
        default: ""
      retention_days:
        description: "Retention period (days) for old runs/artifacts"
        required: true
        default: "7"
      vm_count:
        description: "Number of VMs to run concurrently"
        required: true
        default: "1"

permissions:
  contents: write
  actions: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      RUN_ID: ${{ steps.setid.outputs.RUN_ID }}
    steps:
      # Generate run ID if not provided
      - name: Generate runID
        id: setid
        run: |
          if [ -z "${{ github.event.inputs.run_id }}" ]; then
            runid=$(date +%Y%m%d-%H%M%S)
          else
            runid="${{ github.event.inputs.run_id }}"
          fi
          echo "RUN_ID=$runid" >> $GITHUB_OUTPUT

  run-tests:
    if: ${{ github.event.inputs.action == 'run-tests' }}
    needs: prepare
    # Decide whether to use matrix or single instance
    strategy:
      matrix:
        instance: ${{ fromJSON('[' + join(range(1, github.event.inputs.vm_count | int + 1), ',') + ']') }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      # Checkout repo
      - uses: actions/checkout@v4

      # Setup Java for JMeter
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Install JMeter
      - name: Install JMeter
        run: |
          JMETER_VERSION=5.6.3
          curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-$JMETER_VERSION.tgz -o jmeter.tgz
          tar -xzf jmeter.tgz
          mv apache-jmeter-$JMETER_VERSION $HOME/jmeter
          echo "$HOME/jmeter/bin" >> $GITHUB_PATH

      # Prepare results folder
      - name: Prepare results folder
        run: mkdir -p results

      # Download previous run data if required
      - name: Download previous run data (optional)
        if: ${{ github.event.inputs.previous_run_id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: consumer-data-${{ github.event.inputs.previous_run_id }}
          path: data/

      # Run selected JMeter scripts
      - name: Run selected JMeter scripts
        run: |
          scripts="${{ github.event.inputs.scripts }}"
          IFS=',' read -ra script_arr <<< "$scripts"
          for script in "${script_arr[@]}"; do
            echo "Running JMeter script: $script.jmx on instance ${{ matrix.instance }}"
            jmeter -n -t tests/$script.jmx \
                   -l results/${{ needs.prepare.outputs.RUN_ID }}-$script-instance${{ matrix.instance }}.jtl \
                   -j results/${{ needs.prepare.outputs.RUN_ID }}-$script-instance${{ matrix.instance }}.log \
                   -q env/${{ github.event.inputs.environment }}.properties
            # Convert JTL to HTML report
            jmeter -g results/${{ needs.prepare.outputs.RUN_ID }}-$script-instance${{ matrix.instance }}.jtl \
                   -o results/${{ needs.prepare.outputs.RUN_ID }}-$script-instance${{ matrix.instance }}-report
          done

      # Upload all artifacts including JMX, properties, JTL, logs
      - name: Upload all JMeter artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-artifacts-${{ needs.prepare.outputs.RUN_ID }}-instance${{ matrix.instance }}
          path: |
            results/
            tests/
            env/
          retention-days: ${{ github.event.inputs.retention_days }}

      # Upload consumer data if generated
      - name: Upload consumer data if generated
        if: always()
        run: |
          for f in results/*consumers*.csv; do
            if [ -f "$f" ]; then
              echo "Uploading $f"
              gh upload-artifact --name consumer-data-${{ needs.prepare.outputs.RUN_ID }} --path "$f"
            fi
          done

  cleanup:
    if: ${{ github.event.inputs.action == 'cleanup' }}
    runs-on: ubuntu-latest
    steps:
      # Delete workflow runs older than retention period
      - name: Delete workflow runs older than retention period
        uses: actions/github-script@v7
        with:
          script: |
            const days = parseInt('${{ github.event.inputs.retention_days }}', 10);
            const cutoff = new Date(Date.now() - days*24*60*60*1000);
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const runs = await github.paginate(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, per_page: 100 }
            );

            let deleted = 0;
            for (const run of runs) {
              const created = new Date(run.created_at);
              if (created < cutoff) {
                await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                deleted++;
              }
            }
            core.info(`Deleted ${deleted} workflow runs older than ${days} days`);
